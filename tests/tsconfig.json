{
  "compilerOptions": {
    "target": "ES2021" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "ES2021",
      "DOM",
      "DOM.Iterable"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    "experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators. */,

    "module": "ES2020" /* Specify what module code is generated. */,

    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "declaration": false /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": false /* Create sourcemaps for d.ts files. */,
    "emitDeclarationOnly": false /* Only output d.ts files and not JavaScript files. */,
    "noEmit": true /* Disable emitting files from a compilation. */,

    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read */,
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */
  }
}
