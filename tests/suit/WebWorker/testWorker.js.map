{
  "version": 3,
  "sources": ["../../../browser-message-broker/src/Broker.ts", "testWorker.ts"],
  "sourcesContent": ["export interface Subscription {\r\n  dispose: () => void;\r\n  broadcast: () => void;\r\n  key: string;\r\n  isDisposed?: boolean;\r\n  isBroadcast?: boolean;\r\n}\r\n\r\nexport interface IBroker {\r\n  state: Map<string, Object>;\r\n  subscribers: Map<string, ((msg: unknown) => void | Promise<void>)[]>;\r\n  braodcasts: Map<string, BroadcastChannel>;\r\n  GetState<T>(subsKey: string): T | undefined;\r\n  Subscribe<T>(\r\n    subsKey: string,\r\n    handler?: (msg: T) => void,\r\n    configureBroadcast?: boolean\r\n  ): Subscription;\r\n  Publish(subsKey: string, msg: Object): Promise<void>;\r\n}\r\ndeclare global {\r\n  var BrowserMessageBroker: IBroker;\r\n}\r\n\r\nclass Broker implements IBroker {\r\n  state = new Map<string, Object>();\r\n  subscribers = new Map<string, ((msg: unknown) => void | Promise<void>)[]>();\r\n  braodcasts = new Map<string, BroadcastChannel>();\r\n  /**\r\n   * Creates BroadcastChannel and automatically bridges pub/sub messages to this channel\r\n   * @param subsKey\r\n   * @returns {Subscription}\r\n   */\r\n  private __configureBroadcast(subscription: Subscription): void {\r\n    if (!subscription.key) {\r\n      throw new Error(`Invalid subscription`);\r\n    }\r\n    const bc = new BroadcastChannel(subscription.key);\r\n    bc.onmessage = (ev) => {\r\n      this.__notifySubscribers(subscription.key, ev.data);\r\n    };\r\n    bc.onmessageerror = (ev) => {\r\n      throw Error(\"Broadcast failed: \" + ev.data);\r\n    };\r\n\r\n    this.braodcasts.set(subscription.key, bc);\r\n\r\n    subscription.dispose = () => {\r\n      bc.close();\r\n      subscription.dispose();\r\n      this.braodcasts.delete(subscription.key);\r\n    };\r\n    subscription.isBroadcast = true;\r\n  }\r\n\r\n  GetState<T>(subsKey: string): T | undefined {\r\n    if (subsKey) {\r\n      return this.state.get(subsKey) as T;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private async __notifySubscribers(subsKey: string, msg: Object) {\r\n    const handlers = this.subscribers.get(subsKey) || [];\r\n\r\n    const allSubscribersPromises: Promise<void>[] = [];\r\n    for await (const h of handlers) {\r\n      const res = h(msg);\r\n      allSubscribersPromises.push(Promise.resolve(res));\r\n    }\r\n\r\n    await Promise.all(allSubscribersPromises);\r\n    this.state.set(subsKey, msg);\r\n  }\r\n\r\n  async Publish(subsKey: string, msg: Object) {\r\n    await this.__notifySubscribers(subsKey, msg);\r\n    const bc = this.braodcasts.get(subsKey);\r\n    if (bc) bc.postMessage(msg);\r\n  }\r\n\r\n  Subscribe<T>(\r\n    key: string,\r\n    handler: (msg: T) => void = () => {}\r\n  ): Subscription {\r\n    const subs = this.subscribers.get(key) || [];\r\n    const hdl = handler as (msg: unknown) => void;\r\n    subs.push(hdl);\r\n    this.subscribers.set(key, subs);\r\n    const subscription: Subscription = {\r\n      key: key,\r\n      dispose: () => {\r\n        subs.splice(subs.indexOf(hdl), 1);\r\n        subscription.isDisposed = true;\r\n      },\r\n      broadcast: () => {},\r\n      isDisposed: false,\r\n    };\r\n    subscription.broadcast = () => {\r\n      this.__configureBroadcast(subscription);\r\n      return subscription;\r\n    };\r\n\r\n    return subscription;\r\n  }\r\n}\r\n\r\nglobalThis.BrowserMessageBroker =\r\n  globalThis.BrowserMessageBroker || new Broker();\r\n\r\nexport const BMB = globalThis.BrowserMessageBroker;\r\n", "import { BMB } from \"browser-message-broker\";\r\n\r\nconst responseToWindow = BMB.Subscribe(\"testResp\").broadcast();\r\n\r\nconst requestFromWindow = BMB.Subscribe(\"testReq\", (_) => {\r\n  BMB.Publish(\"testResp\", { payload: \"response\" });\r\n}).broadcast();\r\n\r\n//let window know that worker is ready and execute test\r\npostMessage(\"ready\");\r\n"],
  "mappings": "AAwBA,GAAA,GAAA,KAAgC,CAAhC,aAAA,CACE,KAAA,MAAQ,GAAI,KACZ,KAAA,YAAc,GAAI,KAClB,KAAA,WAAa,GAAI,IAAA,CAMT,qBAAqB,EAAkC,CAC7D,GAAI,CAAC,EAAa,IAChB,KAAM,IAAI,OAAM,sBAAsB,EAExC,GAAM,GAAK,GAAI,kBAAiB,EAAa,GAAG,EAChD,EAAG,UAAa,GAAO,CACrB,KAAK,oBAAoB,EAAa,IAAK,EAAG,IAAI,CACpD,EACA,EAAG,eAAkB,GAAO,CAC1B,KAAM,OAAM,qBAAuB,EAAG,IAAI,CAC5C,EAEA,KAAK,WAAW,IAAI,EAAa,IAAK,CAAE,EAExC,EAAa,QAAU,IAAM,CAC3B,EAAG,MAAM,EACT,EAAa,QAAQ,EACrB,KAAK,WAAW,OAAO,EAAa,GAAG,CACzC,EACA,EAAa,YAAc,EAC7B,CAEA,SAAY,EAAgC,CAC1C,GAAI,EACF,MAAO,MAAK,MAAM,IAAI,CAAO,CAIjC,MAEc,qBAAoB,EAAiB,EAAa,CAC9D,GAAM,GAAW,KAAK,YAAY,IAAI,CAAO,GAAK,CAAC,EAE7C,EAA0C,CAAC,EACjD,aAAiB,KAAK,GAAU,CAC9B,GAAM,GAAM,EAAE,CAAG,EACjB,EAAuB,KAAK,QAAQ,QAAQ,CAAG,CAAC,CAClD,CAEA,KAAM,SAAQ,IAAI,CAAsB,EACxC,KAAK,MAAM,IAAI,EAAS,CAAG,CAC7B,MAEM,SAAQ,EAAiB,EAAa,CAC1C,KAAM,MAAK,oBAAoB,EAAS,CAAG,EAC3C,GAAM,GAAK,KAAK,WAAW,IAAI,CAAO,EAClC,GAAI,EAAG,YAAY,CAAG,CAC5B,CAEA,UACE,EACA,EAA4B,IAAM,CAAC,EACrB,CACd,GAAM,GAAO,KAAK,YAAY,IAAI,CAAG,GAAK,CAAC,EACrC,EAAM,EACZ,EAAK,KAAK,CAAG,EACb,KAAK,YAAY,IAAI,EAAK,CAAI,EAC9B,GAAM,GAA6B,CACjC,IAAK,EACL,QAAS,IAAM,CACb,EAAK,OAAO,EAAK,QAAQ,CAAG,EAAG,CAAC,EAChC,EAAa,WAAa,EAC5B,EACA,UAAW,IAAM,CAAC,EAClB,WAAY,EACd,EACA,MAAA,GAAa,UAAY,IACvB,MAAK,qBAAqB,CAAY,EAC/B,GAGF,CACT,CACF,EAEA,WAAW,qBACT,WAAW,sBAAwB,GAAI,GAElC,GAAM,GAAM,WAAW,qBC7G9B,GAAM,GAAmB,EAAI,UAAU,UAAU,EAAE,UAAU,EAEvD,EAAoB,EAAI,UAAU,UAAW,AAAC,GAAM,CACxD,EAAI,QAAQ,WAAY,CAAE,QAAS,UAAW,CAAC,CACjD,CAAC,EAAE,UAAU,EAGb,YAAY,OAAO",
  "names": []
}
