var c=class{constructor(){this.state=new Map,this.subscribers=new Map,this.braodcasts=new Map}__configureBroadcast(s){if(!s.key)throw new Error("Invalid subscription");let t=new BroadcastChannel(s.key);t.onmessage=e=>{this.__notifySubscribers(s.key,e.data)},t.onmessageerror=e=>{throw Error("Broadcast failed: "+e.data)},this.braodcasts.set(s.key,t),s.dispose=()=>{t.close(),s.dispose(),this.braodcasts.delete(s.key)},s.isBroadcast=!0}GetState(s){if(s)return this.state.get(s)}async __notifySubscribers(s,t){let e=this.subscribers.get(s)||[],a=[];for await(let r of e){let i=r(t);a.push(Promise.resolve(i))}await Promise.all(a),this.state.set(s,t)}async Publish(s,t){await this.__notifySubscribers(s,t);let e=this.braodcasts.get(s);e&&e.postMessage(t)}Subscribe(s,t=()=>{}){let e=this.subscribers.get(s)||[],a=t;e.push(a),this.subscribers.set(s,e);let r={key:s,dispose:()=>{e.splice(e.indexOf(a),1),r.isDisposed=!0},broadcast:()=>{},isDisposed:!1};return r.broadcast=()=>(this.__configureBroadcast(r),r),r}};globalThis.BrowserMessageBroker=globalThis.BrowserMessageBroker||new c;var o=globalThis.BrowserMessageBroker;var l=o.Subscribe("testResp").broadcast(),h=o.Subscribe("testReq",s=>{o.Publish("testResp",{payload:"response"})}).broadcast();postMessage("ready");
//# sourceMappingURL=testWorker.js.map
