// ../browser-message-broker/dist/Broker.js
var b = "broadcast-sync";
var f = "browser-message-broker";
function w(a) {
  return a.channelName === b;
}
function B(a) {
  return a.senderId != null && a.targetId == null;
}
function k(a) {
  return a.senderId != null && a.targetId != null;
}
var l = Math.random().toString(36).substring(2, 9);
function S(a, e = 1) {
  let s;
  return (...t) => {
    clearTimeout(s), s = setTimeout(() => {
      a(...t);
    }, e);
  };
}
var c = /* @__PURE__ */ new Map();
var g = class {
  constructor() {
    this.trace = false;
    this.senderId = l;
    this.state = /* @__PURE__ */ new Map();
    this.subscribers = /* @__PURE__ */ new Map();
    this.braodcasts = /* @__PURE__ */ new Set();
    this.__bcChannel = new BroadcastChannel(f);
    this.__nextMessageAwaters = /* @__PURE__ */ new Map();
    this.broadcastedRequests = /* @__PURE__ */ new Map();
    this.requestListeners = /* @__PURE__ */ new Map();
    if (globalThis.constructor.name === "Window") {
      let e = new CustomEvent("bmb-ready", { detail: this });
      globalThis.document.dispatchEvent(e);
    }
    this.__bcChannel.onmessage = this.handleBroadcast.bind(this), this.__bcChannel.onmessageerror = this.handleBroadcastError.bind(this), this.sendBrokerState = S(this.__sendBrokerState.bind(this), 2), this.sendBrokerState();
  }
  ConfigureChannel(e, s, t, n) {
    c.set(e, { enableBroadcast: s, enableCaching: t, trace: n }), t && this.state.set(e, void 0), s && this.braodcasts.add(e);
  }
  handleBroadcastError(e) {
    throw Error("BROADCAST FAILED: " + e.data);
  }
  __sendBrokerState(e, s) {
    let t = Array.from(this.braodcasts.keys());
    s && s.length > 0 && (t = t.filter((i) => s.includes(i)));
    let n = {};
    for (let i of this.state)
      !i[1] || !t.includes(i[0]) || (n[i[0]] = i[1]);
    let r = { id: l, availableState: n, broadcasts: t }, o = { channelName: b, senderCtx: globalThis.constructor.name, senderId: l, targetId: e, msg: r, channelType: "sync" };
    this.__bcChannel.postMessage(o), this.trace && (e == null ? console.log("[Broadcast sync requested]", o, this) : console.log("[Broadcast sync responded]", e, o, this));
  }
  handleBroadcastSync(e) {
    if (B(e))
      return this.sendBrokerState(e.senderId, e.msg.broadcasts);
    if (k(e))
      for (let s of Object.entries(e.msg.availableState))
        this.braodcasts.has(s[0]) && this.state.has(s[0]) && this.state.get(s[0]) == null && this.__notifySubscribers(s[0], s[1], e.senderId), this.trace && console.log("[Broadcast sync responce handled]", e, this);
  }
  handleBroadcast(e) {
    let s = this.trace || c.get(e.data.channelName)?.trace;
    if (s && console.log("[Broadcast received]", e.data, this), e.data.targetId != null && e.data.targetId !== l) {
      s && console.log("[Broadcast ignored]", e.data, this);
      return;
    }
    if (w(e.data))
      return this.handleBroadcastSync(e.data);
    switch (e.data.channelType) {
      case "pubSub":
        this.__notifySubscribers(e.data.channelName, e.data.msg, e.data.senderId);
        break;
      case "req":
        this.bridgeRequest(e.data.channelName, e.data.msg, e.data.senderId);
        break;
      case "rep":
        let t = this.broadcastedRequests.get(e.data.channelName);
        if (!t)
          return;
        t.resolve(e.data.msg), this.broadcastedRequests.delete(e.data.channelName);
        break;
    }
    s && console.log("[Broadcast handled]", e.data, this);
  }
  __configureBroadcast(e) {
    if (!e.channelName)
      throw new Error("Invalid subscription");
    this.braodcasts.add(e.channelName);
    let s = e.dispose;
    e.dispose = () => {
      s(), this.braodcasts.delete(e.channelName);
    }, e.isBroadcast = true, this.sendBrokerState();
  }
  GetState(e) {
    if (e)
      return this.state.get(e);
  }
  async Broadcast(e, s, t) {
    this._broadcast(e, s, "pubSub", t);
  }
  _broadcast(e, s, t, n) {
    let r = c.get(e);
    (this.trace || r?.trace) && console.log("[Message broadcasted]", e, s, this);
    let i = { channelName: e, senderCtx: globalThis.constructor.name, senderId: l, targetId: n, msg: s, channelType: t };
    r?.enableCaching && this.state.set(e, s), this.__bcChannel.postMessage(i);
  }
  async Publish(e, s, t) {
    (this.trace || c.get(e)?.trace) && console.log("[Message published]", e, s, this), await this.__notifySubscribers(e, s, l), this.braodcasts.has(e) && this._broadcast(e, s, "pubSub", t);
  }
  async nextMessage(e) {
    let s = this.__nextMessageAwaters.get(e);
    if (s)
      return s.promise;
    let t = { promise: void 0, resolve: void 0 };
    return t.promise = new Promise((n) => {
      t.resolve = n;
    }), this.__nextMessageAwaters.set(e, t), t.promise;
  }
  Subscribe(e, s, t = false, n = true) {
    let r = c.get(e), o = false;
    r && (t = r.enableBroadcast, n = r.enableCaching);
    let i = this.subscribers.get(e) || [], d = s;
    i.push(d), this.subscribers.set(e, i);
    let u = { channelName: e, isCached: false, dispose: () => {
      i.splice(i.indexOf(d), 1), u.isDisposed = true;
    }, publish: (h, p) => this.Publish(e, h, p), isDisposed: false };
    return t && this.__configureBroadcast(u), n && this.state.set(e, void 0), (this.trace || c.get(e)?.trace) && console.log(`[Subscribe${o ? ", preconfigured settings" : ""}]`, u, this), u;
  }
  bridgeRequest(e, s, t) {
    let n = this.requestListeners.get(e);
    return n ? n.handler(s, t) : Promise.resolve(void 0);
  }
  Request(e, s, t = false, n) {
    if (t) {
      this._broadcast(e, s, "req", n);
      let r = this.broadcastedRequests.get(e);
      r && r.resolve(void 0);
      let o, d = { promise: new Promise((u) => o = u), resolve: o };
      return this.broadcastedRequests.set(e, d), d.promise;
    } else {
      let r = this.requestListeners.get(e);
      return r ? r.handler(s) : Promise.resolve(void 0);
    }
  }
  Reply(e, s, t = false) {
    if (t) {
      let o = s;
      s = (i, d) => this._broadcast(e, o(i), "rep", d);
    }
    let n = { channelName: e, isDisposed: true, isBroadcast: t, handler: s, dispose: void 0 };
    n.dispose = () => {
      n.isDisposed = true, this.requestListeners.get(e) === n && this.requestListeners.delete(e);
    };
    let r = this.requestListeners.get(e);
    return r && (r.isDisposed = true, console.warn("Request listener replaced: " + e)), this.requestListeners.set(e, n), n;
  }
  async __notifySubscribers(e, s, t) {
    let n = this.subscribers.get(e) || [], r = this.trace || c.get(e)?.trace, o = [];
    for (let i of n)
      !i || (o.push(Promise.resolve(i(s, t))), r && console.log("[Handler called]", i, this));
    await Promise.all(o), this.state.has(e) && this.state.set(e, s), this.__handleAwaiter(e, s), r && console.log("[Message handled]", e, s, this);
  }
  __handleAwaiter(e, s) {
    let t = this.__nextMessageAwaters.get(e);
    !t || (t.resolve(s), this.__nextMessageAwaters.delete(e));
  }
};
globalThis.BrowserMessageBroker = globalThis.BrowserMessageBroker || new g();
var _ = globalThis.BrowserMessageBroker;

// suite/WebWorker/constants.ts
var PUB_SUB_REQUEST_SUBSCRIPTION_KEY = "testReq";
var PUB_SUB_RESPONSE_SUBSCRIPTION_KEY = "testResp";
var REQ_REP_CHANNEL_NAME = "reqRepChannel";

// suite/WebWorker/testWorker.ts
var pubSubChannelToWindow = _.Subscribe(PUB_SUB_RESPONSE_SUBSCRIPTION_KEY, void 0, true);
_.Subscribe(PUB_SUB_REQUEST_SUBSCRIPTION_KEY, (_2) => {
  pubSubChannelToWindow.publish({ payload: "response" });
}, true);
_.Reply(REQ_REP_CHANNEL_NAME, (req) => {
  return { payload: req.payload + "response" };
}, true);
postMessage("ready");
//# sourceMappingURL=data:application/json;base64,
