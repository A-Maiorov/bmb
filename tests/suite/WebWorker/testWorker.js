// ../browser-message-broker/dist/Broker.js
var h = "broadcast-sync";
var g = "browser-message-broker";
function p(a) {
  return a.subsKey === h;
}
function b(a) {
  return a.senderId != null && a.targetId == null;
}
function f(a) {
  return a.senderId != null && a.targetId != null;
}
var c = Math.random().toString(36).substring(2, 9);
function w(a, e = 1) {
  let s;
  return (...t) => {
    clearTimeout(s), s = setTimeout(() => {
      a(...t);
    }, e);
  };
}
var l = class {
  constructor() {
    this.trace = false;
    this.senderId = c;
    this.state = /* @__PURE__ */ new Map();
    this.subscribers = /* @__PURE__ */ new Map();
    this.braodcasts = /* @__PURE__ */ new Set();
    this.__bcChannel = new BroadcastChannel(g);
    this.__nextMessageAwaters = /* @__PURE__ */ new Map();
    this.broadcastedRequests = /* @__PURE__ */ new Map();
    this.requestListeners = /* @__PURE__ */ new Map();
    if (globalThis.constructor.name === "Window") {
      let e = new CustomEvent("bmb-ready", { detail: this });
      globalThis.document.dispatchEvent(e);
    }
    this.__bcChannel.onmessage = this.handleBroadcast.bind(this), this.__bcChannel.onmessageerror = this.handleBroadcastError.bind(this), this.sendBrokerState = w(this.__sendBrokerState.bind(this), 2), this.sendBrokerState();
  }
  handleBroadcastError(e) {
    throw Error("BROADCAST FAILED: " + e.data);
  }
  __sendBrokerState(e, s) {
    let t = Array.from(this.braodcasts.keys());
    s && s.length > 0 && (t = t.filter((o) => s.includes(o)));
    let n = {};
    for (let o of this.state)
      !o[1] || !t.includes(o[0]) || (n[o[0]] = o[1]);
    let r = { id: c, availableState: n, broadcasts: t }, i = { subsKey: h, senderCtx: globalThis.constructor.name, senderId: c, targetId: e, msg: r, channelType: "sync" };
    this.__bcChannel.postMessage(i), this.trace && (e == null ? console.log("[Broadcast sync requested]", i, this) : console.log("[Broadcast sync responded]", e, i, this));
  }
  handleBroadcastSync(e) {
    if (b(e))
      return this.sendBrokerState(e.senderId, e.msg.broadcasts);
    if (f(e))
      for (let s of Object.entries(e.msg.availableState))
        this.braodcasts.has(s[0]) && this.state.has(s[0]) && this.state.get(s[0]) == null && this.__notifySubscribers(s[0], s[1], e.senderId), this.trace && console.log("[Broadcast sync responce handled]", e, this);
  }
  handleBroadcast(e) {
    if (this.trace && console.log("[Broadcast received]", e.data, this), e.data.targetId != null && e.data.targetId !== c) {
      this.trace && console.log("[Broadcast ignored]", e.data, this);
      return;
    }
    if (p(e.data))
      return this.handleBroadcastSync(e.data);
    switch (e.data.channelType) {
      case "pubSub":
        this.__notifySubscribers(e.data.subsKey, e.data.msg, e.data.senderId);
        break;
      case "req":
        this.bridgeRequest(e.data.subsKey, e.data.msg, e.data.senderId);
        break;
      case "rep":
        let s = this.broadcastedRequests.get(e.data.subsKey);
        if (!s)
          return;
        s.resolve(e.data.msg), this.broadcastedRequests.delete(e.data.subsKey);
        break;
    }
    this.trace && console.log("[Broadcast handled]", e.data, this);
  }
  __configureBroadcast(e) {
    if (!e.key)
      throw new Error("Invalid subscription");
    this.braodcasts.add(e.key);
    let s = e.dispose;
    e.dispose = () => {
      s(), this.braodcasts.delete(e.key);
    }, e.isBroadcast = true, this.sendBrokerState();
  }
  GetState(e) {
    if (e)
      return this.state.get(e);
  }
  async Broadcast(e, s, t) {
    this._broadcast(e, s, "pubSub", t);
  }
  _broadcast(e, s, t, n) {
    this.trace && console.log("[Message broadcasted]", e, s, this);
    let r = { subsKey: e, senderCtx: globalThis.constructor.name, senderId: c, targetId: n, msg: s, channelType: t };
    this.__bcChannel.postMessage(r);
  }
  async Publish(e, s, t) {
    this.trace && console.log("[Message published]", e, s, this), await this.__notifySubscribers(e, s, c), this.braodcasts.has(e) && this._broadcast(e, s, "pubSub", t);
  }
  async nextMessage(e) {
    let s = this.__nextMessageAwaters.get(e);
    if (s)
      return s.promise;
    let t = { promise: void 0, resolve: void 0 };
    return t.promise = new Promise((n) => {
      t.resolve = n;
    }), this.__nextMessageAwaters.set(e, t), t.promise;
  }
  Subscribe(e, s, t = false, n = true) {
    let r = this.subscribers.get(e) || [], i = s;
    r.push(i), this.subscribers.set(e, r);
    let o = { key: e, isCached: false, dispose: () => {
      r.splice(r.indexOf(i), 1), o.isDisposed = true;
    }, publish: (d, u) => this.Publish(e, d, u), isDisposed: false };
    return t && this.__configureBroadcast(o), n && this.state.set(e, void 0), this.trace && console.log("[Subscribe]", o, this), o;
  }
  bridgeRequest(e, s, t) {
    let n = this.requestListeners.get(e);
    return n ? n.handler(s, t) : Promise.resolve(void 0);
  }
  Request(e, s, t = false, n) {
    if (t) {
      this._broadcast(e, s, "req", n);
      let r = this.broadcastedRequests.get(e);
      r && r.resolve(void 0);
      let i, d = { promise: new Promise((u) => i = u), resolve: i };
      return this.broadcastedRequests.set(e, d), d.promise;
    } else {
      let r = this.requestListeners.get(e);
      return r ? r.handler(s) : Promise.resolve(void 0);
    }
  }
  Reply(e, s, t = false) {
    if (t) {
      let i = s;
      s = (o, d) => this._broadcast(e, i(o), "rep", d);
    }
    let n = { channelName: e, isDisposed: true, isBroadcast: t, handler: s, dispose: void 0 };
    n.dispose = () => {
      n.isDisposed = true, this.requestListeners.get(e) === n && this.requestListeners.delete(e);
    };
    let r = this.requestListeners.get(e);
    return r && (r.isDisposed = true, console.warn("Request listener replaced: " + e)), this.requestListeners.set(e, n), n;
  }
  async __notifySubscribers(e, s, t) {
    let n = this.subscribers.get(e) || [], r = [];
    for (let i of n)
      !i || (r.push(Promise.resolve(i(s, t))), this.trace && console.log("[Handler called]", i, this));
    await Promise.all(r), this.state.has(e) && this.state.set(e, s), this.__handleAwaiter(e, s), this.trace && console.log("[Message handled]", e, s, this);
  }
  __handleAwaiter(e, s) {
    let t = this.__nextMessageAwaters.get(e);
    !t || (t.resolve(s), this.__nextMessageAwaters.delete(e));
  }
};
globalThis.BrowserMessageBroker = globalThis.BrowserMessageBroker || new l();
var B = globalThis.BrowserMessageBroker;

// suite/WebWorker/constants.ts
var PUB_SUB_REQUEST_SUBSCRIPTION_KEY = "testReq";
var PUB_SUB_RESPONSE_SUBSCRIPTION_KEY = "testResp";
var REQ_REP_CHANNEL_NAME = "reqRepChannel";

// suite/WebWorker/testWorker.ts
var pubSubChannelToWindow = B.Subscribe(PUB_SUB_RESPONSE_SUBSCRIPTION_KEY, void 0, true);
B.Subscribe(PUB_SUB_REQUEST_SUBSCRIPTION_KEY, (_) => {
  pubSubChannelToWindow.publish({ payload: "response" });
}, true);
B.Reply(REQ_REP_CHANNEL_NAME, (req) => {
  return { payload: req.payload + "response" };
}, true);
postMessage("ready");
//# sourceMappingURL=data:application/json;base64,
