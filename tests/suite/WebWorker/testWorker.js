"use strict";

// ../browser-message-broker/dist/Module.js
var T = /* @__PURE__ */ new Map();
var b = class {
  constructor(e, s) {
    this.type = "reqRep";
    this.settings = {};
    this.name = "";
    this.name = e, this.settings = s;
  }
  async request(e) {
    return i.Request(this.name, e, this.settings.broadcast);
  }
  reply(e) {
    return i.Reply(this.name, e, this.settings.broadcast).dispose;
  }
  dispose() {
    i.requestListeners.delete(this.name), T.delete(this.name);
  }
  static for(e, s) {
    if (!s) {
      let n = T.get(e);
      if (!n)
        throw Error("Can't find channel settings");
      return n;
    }
    i.ConfigureChannel(e, s.broadcast || false, s.cache || false, s.trace || false);
    let t = new b(e, s);
    return T.set(e, t), t;
  }
};
var S = "broadcast-sync";
var R = "browser-message-broker";
function k(d) {
  return d.channelName === S;
}
function B(d) {
  return d.senderId != null && d.targetId == null;
}
function q(d) {
  return d.senderId != null && d.targetId != null;
}
var l = Math.random().toString(36).substring(2, 9);
function M(d, e = 1) {
  let s;
  return (...t) => {
    clearTimeout(s), s = setTimeout(() => {
      d(...t);
    }, e);
  };
}
var h = /* @__PURE__ */ new Map();
var w = class {
  constructor() {
    this.trace = false;
    this.senderId = l;
    this.state = /* @__PURE__ */ new Map();
    this.subscribers = /* @__PURE__ */ new Map();
    this.braodcasts = /* @__PURE__ */ new Set();
    this.__bcChannel = new BroadcastChannel(R);
    this.__nextMessageAwaters = /* @__PURE__ */ new Map();
    this.broadcastedRequests = /* @__PURE__ */ new Map();
    this.requestListeners = /* @__PURE__ */ new Map();
    this.__bcChannel.onmessage = this.handleBroadcast.bind(this), this.__bcChannel.onmessageerror = this.handleBroadcastError.bind(this), setTimeout(() => {
      this.__sendBrokerState(void 0, void 0);
    }, 0), this.sendBrokerState = M(this.__sendBrokerState.bind(this), 2);
  }
  log(e, s, ...t) {
    (this.trace || h.get(s)?.trace) && console.log(`[${globalThis.constructor.name}(${this.senderId})-${s}] ${e}`, t);
  }
  ConfigureChannel(e, s, t, n) {
    h.set(e, { broadcast: s, cache: t, trace: n }), t && this.state.set(e, void 0), s && this.braodcasts.add(e);
  }
  handleBroadcastError(e) {
    throw Error("BROADCAST FAILED: " + e.data);
  }
  __sendBrokerState(e, s) {
    let t = Array.from(this.braodcasts.keys());
    s && s.length > 0 && (t = t.filter((o) => s.includes(o)));
    let n = {};
    for (let o of this.state)
      !o[1] || !t.includes(o[0]) || (n[o[0]] = o[1]);
    let r = { id: l, availableState: n, broadcasts: t }, a = { channelName: S, senderCtx: globalThis.constructor.name, senderId: l, targetId: e, msg: r, channelType: "sync" };
    this.__bcChannel.postMessage(a), e == null ? this.log("Broadcast sync requested", "", { brokerState: r }) : this.log("Broadcast sync responded", "", { targetId: e, brokerState: r });
  }
  handleBroadcastSync(e) {
    if (B(e))
      return this.sendBrokerState(e.senderId, e.msg.broadcasts);
    if (q(e))
      for (let s of Object.entries(e.msg.availableState))
        this.braodcasts.has(s[0]) && this.state.has(s[0]) && this.state.get(s[0]) == null && this.__notifySubscribers(s[0], s[1], e.senderId), this.log("Broadcast sync responce handled", "", e.msg);
  }
  handleBroadcast(e) {
    if (this.log("Broadcast received", e.data.channelName, e.data), e.data.targetId != null && e.data.targetId !== l) {
      this.log("Broadcast ignored (different targetId)", e.data.channelName);
      return;
    }
    if (k(e.data))
      return this.handleBroadcastSync(e.data);
    switch (e.data.channelType) {
      case "pubSub":
        this.__notifySubscribers(e.data.channelName, e.data.msg, e.data.senderId);
        break;
      case "req":
        this.bridgeRequest(e.data.channelName, e.data.msg, e.data.senderId);
        break;
      case "rep":
        let s = this.broadcastedRequests.get(e.data.channelName);
        if (!s)
          return;
        s.resolve(e.data.msg), this.broadcastedRequests.delete(e.data.channelName);
        break;
    }
    this.log("Broadcast handled", e.data.channelName, e.data);
  }
  __configureBroadcast(e) {
    if (!e.channelName)
      throw new Error("Invalid subscription");
    this.braodcasts.add(e.channelName);
    let s = e.dispose;
    e.dispose = () => {
      s(), this.braodcasts.delete(e.channelName);
    }, e.isBroadcast = true, this.sendBrokerState();
  }
  GetState(e) {
    if (e)
      return this.state.get(e);
  }
  async Broadcast(e, s, t) {
    this._broadcast(e, s, "pubSub", t);
  }
  async _broadcast(e, s, t, n) {
    let r = h.get(e);
    this.log(`Message broadcasted (${t}) to ${n || "all brokers"}`, e, s);
    let a = await Promise.resolve(s), o = { channelName: e, senderCtx: globalThis.constructor.name, senderId: l, targetId: n, msg: a, channelType: t };
    r?.cache && this.state.set(e, s), this.__bcChannel.postMessage(o);
  }
  async Publish(e, s, t) {
    this.log("Message published", e, s), await this.__notifySubscribers(e, s, l), this.braodcasts.has(e) && this._broadcast(e, s, "pubSub", t);
  }
  async nextMessage(e) {
    let s = this.__nextMessageAwaters.get(e);
    if (s)
      return s.promise;
    let t = { promise: void 0, resolve: void 0 };
    return t.promise = new Promise((n) => {
      t.resolve = n;
    }), this.__nextMessageAwaters.set(e, t), t.promise;
  }
  Subscribe(e, s, t = false, n = true) {
    let r = h.get(e), a = false;
    r && (t = r.broadcast || false, n = r.cache || true);
    let o = this.subscribers.get(e) || [], c = s;
    o.push(c), this.subscribers.set(e, o);
    let u = { channelName: e, isCached: false, dispose: () => {
      let g = this.subscribers.get(e);
      if (g == null)
        return;
      let p = g.indexOf(c);
      p !== -1 && g.splice(p, 1);
    }, publish: (g, p) => this.Publish(e, g, p), isDisposed: false };
    return t && this.__configureBroadcast(u), n && this.state.set(e, void 0), u;
  }
  bridgeRequest(e, s, t) {
    let n = this.requestListeners.get(e);
    return n ? n.handler(s, t) : Promise.resolve(void 0);
  }
  Request(e, s, t = false, n) {
    if (t) {
      this._broadcast(e, s, "req", n);
      let r = this.broadcastedRequests.get(e);
      r && r.resolve(void 0);
      let a, c = { promise: new Promise((u) => a = u), resolve: a };
      return this.broadcastedRequests.set(e, c), c.promise;
    } else {
      let r = this.requestListeners.get(e);
      return r ? r.handler(s) : Promise.resolve(void 0);
    }
  }
  Reply(e, s, t = false) {
    if (t) {
      let o = s;
      s = (c, u) => this._broadcast(e, o(c), "rep", u);
    }
    let n = this.requestListeners, r = { channelName: e, get isDisposed() {
      return n.has(e);
    }, isBroadcast: t, handler: s, dispose: void 0 };
    r.dispose = () => {
      r.isDisposed = true, this.requestListeners.get(e) === r && this.requestListeners.delete(e);
    };
    let a = this.requestListeners.get(e);
    return a && (a.isDisposed = true, console.warn("Request listener has been replaced: " + e)), this.requestListeners.set(e, r), r;
  }
  async __notifySubscribers(e, s, t) {
    let n = this.subscribers.get(e) || [], r = [];
    for (let a of n)
      !a || (r.push(Promise.resolve(a(s, t))), this.log("Handler called", e, a));
    await Promise.all(r), h.get(e)?.cache && this.state.set(e, s), this.__handleAwaiter(e, s), this.log("Message handled", e, s, this);
  }
  __handleAwaiter(e, s) {
    let t = this.__nextMessageAwaters.get(e);
    !t || (t.resolve(s), this.__nextMessageAwaters.delete(e));
  }
};
globalThis.BrowserMessageBroker = globalThis.BrowserMessageBroker || new w();
var i = globalThis.BrowserMessageBroker;
var m = /* @__PURE__ */ new Map();
var f = class {
  constructor(e, s) {
    this.type = "pubSub";
    this.dispose = () => {
      i.subscribers.delete(this.name), m.delete(this.name);
    };
    this.name = "";
    this.settings = {};
    this.name = e, this.settings = s;
  }
  static for(e, s) {
    if (!s) {
      let n = m.get(e);
      if (!n)
        throw Error("Can't find channel settings");
      return n;
    }
    i.ConfigureChannel(e, s.broadcast || false, s.cache || false, s.trace || false);
    let t = new f(e, s);
    return m.set(e, t), t;
  }
  async send(e, s) {
    i.Publish(this.name, e, s);
  }
  static async publish(e, s, t) {
    i.Publish(e, s, t);
  }
  static async broadcast(e, s, t) {
    i.Broadcast(e, s, t);
  }
  subscribe(e) {
    return i.Subscribe(this.name, e, this.settings.broadcast, this.settings.cache).dispose;
  }
  getState() {
    return i.GetState(this.name);
  }
  static GetState(e) {
    return i.GetState(e);
  }
  nextMessage() {
    return i.nextMessage(this.name);
  }
  static nextMessage(e) {
    return i.nextMessage(e);
  }
};

// suite/WebWorker/constants.ts
var PUB_SUB_REQUEST_SUBSCRIPTION_KEY = "testReq";
var PUB_SUB_RESPONSE_SUBSCRIPTION_KEY = "testResp";
var REQ_REP_CHANNEL_NAME = "reqRepChannel";

// suite/WebWorker/testWorker.ts
f.for(PUB_SUB_REQUEST_SUBSCRIPTION_KEY, {
  broadcast: true
}).subscribe((_) => {
  f.broadcast(PUB_SUB_RESPONSE_SUBSCRIPTION_KEY, { payload: "response" });
});
b.for(REQ_REP_CHANNEL_NAME, {
  broadcast: true
}).reply((req) => {
  return { payload: req.payload + "response" };
});
postMessage("ready");
//# sourceMappingURL=data:application/json;base64,
