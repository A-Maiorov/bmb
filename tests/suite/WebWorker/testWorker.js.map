{
  "version": 3,
  "sources": ["../../../browser-message-broker/src/Broker.ts", "testWorker.ts"],
  "sourcesContent": ["import {\r\n  IBroadcastEnvelope,\r\n  IBroadcastSyncEnvelope,\r\n  IBroker,\r\n  IBrokerState,\r\n  Subscription,\r\n  THandler,\r\n} from \"./Types\";\r\n\r\nconst BROADCAST_SYNC = \"broadcast-sync\";\r\nconst BROWSER_MESSAGE_BROKER = \"browser-message-broker\";\r\n\r\nfunction isBroadcastSync(e: IBroadcastEnvelope): e is IBroadcastSyncEnvelope {\r\n  return e.subsKey === BROADCAST_SYNC;\r\n}\r\n\r\nfunction isSyncReq(e: IBroadcastEnvelope) {\r\n  return e.senderId != undefined && e.targetId == undefined;\r\n}\r\nfunction isSyncResp(e: IBroadcastEnvelope) {\r\n  return e.senderId != undefined && e.targetId != undefined;\r\n}\r\n\r\nexport const senderId = Math.random().toString(36).substring(2, 9);\r\n\r\nfunction debounce<T extends Function>(func: T, timeout = 1) {\r\n  let timer: number;\r\n  return (...args: unknown[]) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      func(...args);\r\n    }, timeout);\r\n  };\r\n}\r\n\r\nclass Broker implements IBroker {\r\n  trace: boolean = false;\r\n  senderId = senderId;\r\n  state = new Map<string, any>();\r\n  subscribers = new Map<string, THandler[]>();\r\n  braodcasts = new Set<string>();\r\n  private __bcChannel = new BroadcastChannel(BROWSER_MESSAGE_BROKER);\r\n\r\n  constructor() {\r\n    if (globalThis.constructor.name === \"Window\") {\r\n      const ev = new CustomEvent(\"bmb-ready\", { detail: this });\r\n      globalThis.document.dispatchEvent(ev);\r\n    }\r\n    this.__bcChannel.onmessage = this.handleBroadcast.bind(this);\r\n    this.__bcChannel.onmessageerror = this.handleBroadcastError.bind(this);\r\n\r\n    this.sendBrokerState = debounce(this.__sendBrokerState.bind(this), 2);\r\n\r\n    this.sendBrokerState();\r\n  }\r\n\r\n  private handleBroadcastError(ev: MessageEvent<IBroadcastEnvelope>) {\r\n    throw Error(\"BROADCAST FAILED: \" + ev.data);\r\n  }\r\n\r\n  private sendBrokerState: (\r\n    targetId?: string,\r\n    filterBroadcasts?: string[]\r\n  ) => void;\r\n  private __sendBrokerState(targetId?: string, filterBroadcasts?: string[]) {\r\n    let currentBroadcasts = Array.from(this.braodcasts.keys());\r\n\r\n    if (filterBroadcasts && filterBroadcasts.length > 0) {\r\n      currentBroadcasts = currentBroadcasts.filter((k) =>\r\n        filterBroadcasts.includes(k)\r\n      );\r\n    }\r\n\r\n    const availableState: { [x: string]: any } = {};\r\n    for (const x of this.state) {\r\n      if (!x[1]) continue;\r\n      if (!currentBroadcasts.includes(x[0])) continue;\r\n      availableState[x[0]] = x[1];\r\n    }\r\n\r\n    const state: IBrokerState = {\r\n      id: senderId,\r\n      availableState,\r\n      broadcasts: currentBroadcasts,\r\n    };\r\n\r\n    const ev: IBroadcastSyncEnvelope = {\r\n      subsKey: BROADCAST_SYNC,\r\n      senderCtx: globalThis.constructor.name,\r\n      senderId,\r\n      targetId,\r\n      msg: state,\r\n    };\r\n\r\n    this.__bcChannel.postMessage(ev);\r\n\r\n    if (this.trace)\r\n      if (targetId == undefined)\r\n        console.log(\"[Broadcast sync requested]\", ev, this);\r\n      else console.log(\"[Broadcast sync responded]\", targetId, ev, this);\r\n  }\r\n\r\n  private handleBroadcastSync(ev: IBroadcastSyncEnvelope) {\r\n    if (isSyncReq(ev))\r\n      return this.sendBrokerState(ev.senderId, ev.msg.broadcasts);\r\n    if (isSyncResp(ev)) {\r\n      for (const s of Object.entries(ev.msg.availableState)) {\r\n        if (\r\n          this.braodcasts.has(s[0]) &&\r\n          this.state.has(s[0]) &&\r\n          this.state.get(s[0]) == undefined\r\n        ) {\r\n          this.__notifySubscribers(s[0], s[1], ev.senderId);\r\n        }\r\n        if (this.trace)\r\n          console.log(\"[Broadcast sync responce handled]\", ev, this);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleBroadcast(ev: MessageEvent<IBroadcastEnvelope>) {\r\n    if (this.trace) console.log(\"[Broadcast received]\", ev.data, this);\r\n\r\n    if (ev.data.targetId != undefined && ev.data.targetId !== senderId) {\r\n      if (this.trace) console.log(\"[Broadcast ignored]\", ev.data, this);\r\n      return;\r\n    }\r\n\r\n    if (isBroadcastSync(ev.data)) return this.handleBroadcastSync(ev.data);\r\n\r\n    this.__notifySubscribers(ev.data.subsKey, ev.data.msg, ev.data.senderId);\r\n    if (this.trace) console.log(\"[Broadcast handled]\", ev.data, this);\r\n  }\r\n\r\n  /**\r\n   * Bridge pub/sub messages to broadcast channel\r\n   * @param subsKey\r\n   * @returns {Subscription}\r\n   */\r\n  private __configureBroadcast(subscription: Subscription<any>): void {\r\n    if (!subscription.key) {\r\n      throw new Error(`Invalid subscription`);\r\n    }\r\n    this.braodcasts.add(subscription.key);\r\n    const originalDispose = subscription.dispose;\r\n    subscription.dispose = () => {\r\n      originalDispose();\r\n      this.braodcasts.delete(subscription.key);\r\n    };\r\n    subscription.isBroadcast = true;\r\n\r\n    this.sendBrokerState();\r\n  }\r\n\r\n  GetState<T>(subsKey: string): T | undefined {\r\n    if (subsKey) {\r\n      return this.state.get(subsKey) as T;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n  async Publish(subsKey: string, msg: unknown, targetId?: string) {\r\n    if (this.trace) console.log(\"[Message published]\", subsKey, msg, this);\r\n    await this.__notifySubscribers(subsKey, msg, senderId);\r\n    const bc = this.braodcasts.has(subsKey);\r\n    if (!bc) return;\r\n\r\n    const envelope: IBroadcastEnvelope = {\r\n      subsKey,\r\n      senderCtx: globalThis.constructor.name,\r\n      senderId: senderId,\r\n      targetId: targetId,\r\n      msg,\r\n    };\r\n\r\n    this.__bcChannel.postMessage(envelope);\r\n  }\r\n\r\n  Subscribe<T>(\r\n    key: string,\r\n    handler?: THandler<T>,\r\n    enableBroadcast = false,\r\n    enableCaching = true\r\n  ): Subscription<T> {\r\n    const subs = this.subscribers.get(key) || [];\r\n    const hdl = handler as (msg: unknown) => void;\r\n    subs.push(hdl);\r\n    this.subscribers.set(key, subs);\r\n\r\n    const subscription: Subscription<T> = {\r\n      key: key,\r\n      isCached: false,\r\n      dispose: () => {\r\n        subs.splice(subs.indexOf(hdl), 1);\r\n        subscription.isDisposed = true;\r\n      },\r\n      publish: (msg, targetId?: string) => this.Publish(key, msg, targetId),\r\n      isDisposed: false,\r\n    };\r\n\r\n    if (enableBroadcast) this.__configureBroadcast(subscription);\r\n    if (enableCaching) this.state.set(key, undefined);\r\n\r\n    if (this.trace) console.log(\"[Subscribe]\", subscription, this);\r\n    return subscription;\r\n  }\r\n\r\n  private async __notifySubscribers(\r\n    subsKey: string,\r\n    msg: unknown,\r\n    sId: string\r\n  ) {\r\n    const handlers = this.subscribers.get(subsKey) || [];\r\n\r\n    const allSubscribersPromises: Promise<void>[] = [];\r\n    for (const h of handlers) {\r\n      if (!h) continue;\r\n      allSubscribersPromises.push(Promise.resolve(h(msg, sId)));\r\n      if (this.trace) console.log(\"[Handler called]\", h, this);\r\n    }\r\n\r\n    await Promise.all(allSubscribersPromises);\r\n\r\n    if (this.state.has(subsKey)) this.state.set(subsKey, msg);\r\n    if (this.trace) console.log(\"[Message handled]\", subsKey, msg, this);\r\n  }\r\n}\r\n\r\nglobalThis.BrowserMessageBroker =\r\n  globalThis.BrowserMessageBroker || new Broker();\r\n\r\nexport const BMB = globalThis.BrowserMessageBroker;\r\nexport type { IBroker, Subscription } from \"./Types\";\r\n", "import { BMB } from \"browser-message-broker\";\r\n\r\nconst responseToWindow = BMB.Subscribe(\"testResp\", undefined, true);\r\n\r\nconst requestFromWindow = BMB.Subscribe(\r\n  \"testReq\",\r\n  (_) => {\r\n    BMB.Publish(\"testResp\", { payload: \"response\" });\r\n  },\r\n  true\r\n);\r\n\r\n//let window know that worker is ready and execute test\r\npostMessage(\"ready\");\r\n"],
  "mappings": "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",
  "names": []
}
